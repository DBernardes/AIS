"""
Atmosphere Spectral Response
============================

This class calculates the output flux of an astronomical object as a funtction
of the atmosphere spectral response.
"""
import numpy as np
import pandas as pd
from scipy.interpolate import splev, splrep


class Atmosphere_Spectral_Response:
    """Atmosphere Spectral Response Class."""

    _SPECTRAL_RESPONSE_FILE = (
        r"Atmosphere_Spectral_Response/atmosphere_spectral_response.xlsx"
    )

    def __init__(self):
        """Initialize the class."""
        pass

    def _read_spreadsheet(self):
        ss = np.asarray(pd.read_excel(self._SPECTRAL_RESPONSE_FILE))
        self.wavelength_interval = [float(value) for value in ss[1:, 0]]
        self.transmitance = [float(value) for value in ss[1:, 1]]
        self.atm_wavelength_interval, self.transmitance = np.asarray(
            self.wavelength_interval
        ), np.asarray(self.transmitance)

    def _calculate_spline(self, wavelength_interval):
        spl = splrep(self.atm_wavelength_interval, self.transmitance)
        transmitance = splev(wavelength_interval, spl)
        return transmitance

    def apply_atmosphere_spectral_response(
        self, star_specific_flux, l_init, l_final, l_step
    ):
        """Apply the atmosphere spectral response.

        This function applies the atmosphere spectral response on the
        calculated star spectrum

        Parameters
        ----------
        star_spectrum : array like
            Spectrum of the star

        Returns
        -------
        star_spectrum : array like
            Spectrum of the star generated by the spectral response of the
        terrestrial atmosphere.

        l_init: int
            Initial wavelength in nanometers.

        l_final: int
            Final wavelength in nanometers.

        l_step: int
            Step for the wavelength interval in nanometers.
        """
        self.star_specific_flux = star_specific_flux
        wavelength_interval = range(l_init, l_final, l_step)
        self._read_spreadsheet()
        transmitance = self._calculate_spline(wavelength_interval)
        new_specific_flux = np.multiply(star_specific_flux[0, :], transmitance)
        self.star_specific_flux[0, :] = new_specific_flux

        return self.star_specific_flux
